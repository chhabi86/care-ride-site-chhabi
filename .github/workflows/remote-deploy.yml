name: Remote Deploy to Ubuntu Server

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  remote-deploy:
    name: Remote deploy (SSH)
    runs-on: ubuntu-latest
    steps:
      - name: Write SSH key to temporary file
        shell: bash
        run: |
          set -euo pipefail
          used_fallback=0
          if [ -n "${{ secrets.DEPLOY_SSH_KEY_B64 }}" ]; then
            echo "Decoding base64 private key"
            if ! echo "${{ secrets.DEPLOY_SSH_KEY_B64 }}" | base64 -d > /tmp/deploy_key 2>/dev/null; then
              echo "Base64 decode failed; trying raw key secret if present" >&2
              if [ -n "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
                printf "%s\n" "${{ secrets.DEPLOY_SSH_KEY }}" > /tmp/deploy_key
                used_fallback=1
              else
                echo "No raw secret available to fallback" >&2
              fi
            fi
          else
            printf "%s\n" "${{ secrets.DEPLOY_SSH_KEY }}" > /tmp/deploy_key
            used_fallback=1
          fi
          sed -i 's/\r$//' /tmp/deploy_key || true
          chmod 600 /tmp/deploy_key || true
          size=$(wc -c < /tmp/deploy_key 2>/dev/null || echo 0)
          echo "Written key size: ${size} bytes (fallback=${used_fallback})"
          if ! grep -q 'BEGIN OPENSSH PRIVATE KEY' /tmp/deploy_key; then
            echo "Warning: Missing BEGIN header" >&2
          fi
          if ! grep -q 'END OPENSSH PRIVATE KEY' /tmp/deploy_key; then
            echo "Warning: Missing END footer" >&2
          fi
          if ! ssh-keygen -y -f /tmp/deploy_key >/dev/null 2>&1; then
            echo "Initial validation failed. Attempting newline repair..." >&2
            printf '\n' >> /tmp/deploy_key
            if ssh-keygen -y -f /tmp/deploy_key >/dev/null 2>&1; then
              echo "Validation succeeded after newline repair" >&2
            else
              echo "SSH key invalid or unreadable" >&2
              echo "Debug: final size $(wc -c < /tmp/deploy_key) bytes, sha256 $(sha256sum /tmp/deploy_key | cut -c1-16)" >&2
              exit 1
            fi
          else
            echo "SSH key loaded OK (sha256 $(sha256sum /tmp/deploy_key | cut -c1-12))"
          fi

      - name: Run remote deploy script over SSH (manual)
        shell: bash
        run: |
          set -euo pipefail
          echo "Connecting to ${{ secrets.DEPLOY_HOST }} as ${{ secrets.DEPLOY_USER }}"
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key -p "${{ secrets.DEPLOY_SSH_PORT }}" "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}" <<'REMOTE'
            set -euo pipefail
            echo "Running remote deploy on ${HOSTNAME:-remote}"
            # If DOMAIN not already set in environment, try to inject from CI secret (baked into heredoc by GitHub before sending)
            if [ -z "${DOMAIN:-}" ]; then
              DOMAIN="${{ secrets.DEPLOY_DOMAIN }}"
            fi
            if [ -z "${DOMAIN:-}" ]; then
              echo "WARNING: DOMAIN not provided. Proceeding without TLS (certbot will be skipped if deploy.sh supports SKIP_TLS)." >&2
              export SKIP_TLS=1
            else
              export DOMAIN
              echo "Using DOMAIN=$DOMAIN"
            fi
            # Ensure /opt exists and is writable by the deploy user
            if [ ! -d /opt ]; then
              sudo mkdir -p /opt
              sudo chown $USER: /opt || true
            fi

            if [ ! -d /opt/care-ride-site-chhabi ]; then
              echo "Cloning repository into /opt/care-ride-site-chhabi"
              sudo git clone https://github.com/chhabi86/care-ride-site-chhabi.git /opt/care-ride-site-chhabi
              sudo chown -R $USER: /opt/care-ride-site-chhabi || true
            else
              echo "Updating repository in /opt/care-ride-site-chhabi"
              cd /opt/care-ride-site-chhabi || exit 1
              sudo git fetch origin main --prune || true
              sudo git reset --hard origin/main || true
            fi

            cd /opt/care-ride-site-chhabi || exit 1
            sudo chmod +x ./deploy.sh || true
            echo "Starting deploy.sh (may take several minutes) with DOMAIN='${DOMAIN:-}'"
            # Run deploy preserving DOMAIN env (avoid sudo environment stripping)
            if [ "$(id -u)" = "0" ]; then
              DOMAIN="$DOMAIN" ./deploy.sh
            else
              DOMAIN="$DOMAIN" sudo -E ./deploy.sh
            fi
          REMOTE
