name: Backend Deploy with SSH Retry

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout backend code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: mvn test
        continue-on-error: true

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image..."
          docker build -t care-ride-backend .
          docker save care-ride-backend > care-ride-backend.tar
          echo "✅ Docker image built and saved"

      - name: Setup SSH with retry logic
        run: |
          # Setup SSH key
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          
          # Create SSH retry function
          echo 'ssh_retry() {
            local cmd="$1"
            local max_attempts=5
            local delay=10
            
            for i in $(seq 1 $max_attempts); do
              echo "🔄 SSH attempt $i/$max_attempts..."
              
              if timeout 120 ssh -o ConnectTimeout=30 \
                               -o ServerAliveInterval=10 \
                               -o ServerAliveCountMax=3 \
                               -o StrictHostKeyChecking=no \
                               -o BatchMode=yes \
                               -i /tmp/deploy_key \
                               ubuntu@${{ secrets.DEPLOY_HOST }} \
                               "$cmd"; then
                echo "✅ SSH command succeeded on attempt $i"
                return 0
              else
                echo "❌ SSH attempt $i failed"
                if [ $i -lt $max_attempts ]; then
                  echo "⏳ Waiting ${delay}s before retry..."
                  sleep $delay
                  delay=$((delay * 2))
                fi
              fi
            done
            
            echo "💥 All SSH attempts failed"
            return 1
          }' > /tmp/ssh_retry.sh
          chmod +x /tmp/ssh_retry.sh

      - name: Test server connectivity
        run: |
          source /tmp/ssh_retry.sh
          echo "🔍 Testing server connectivity..."
          ssh_retry "echo 'Server connectivity test successful' && uptime && docker --version"

      - name: Upload Docker image with retry
        run: |
          # SCP retry function
          scp_retry() {
            local src="$1"
            local dest="$2"
            local max_attempts=5
            local delay=10
            
            for i in $(seq 1 $max_attempts); do
              echo "🔄 SCP attempt $i/$max_attempts..."
              
              if timeout 600 scp -o ConnectTimeout=30 \
                                 -o ServerAliveInterval=10 \
                                 -o ServerAliveCountMax=3 \
                                 -o StrictHostKeyChecking=no \
                                 -o BatchMode=yes \
                                 -i /tmp/deploy_key \
                                 "$src" "$dest"; then
                echo "✅ File upload succeeded on attempt $i"
                return 0
              else
                echo "❌ SCP attempt $i failed"
                if [ $i -lt $max_attempts ]; then
                  echo "⏳ Waiting ${delay}s before retry..."
                  sleep $delay
                  delay=$((delay * 2))
                fi
              fi
            done
            
            echo "💥 All SCP attempts failed"
            return 1
          }
          
          echo "📤 Uploading Docker image..."
          scp_retry "care-ride-backend.tar" "ubuntu@${{ secrets.DEPLOY_HOST }}:/tmp/"

      - name: Deploy backend to server
        run: |
          source /tmp/ssh_retry.sh
          
          echo "🚀 Starting backend deployment..."
          
          ssh_retry "
            set -e
            
            echo '🐳 Setting up Docker network...'
            docker network create care-ride-net 2>/dev/null || echo 'Network already exists'
            
            echo '⏹️ Stopping existing backend containers...'
            docker stop \$(docker ps -q --filter 'name=care-ride-backend') 2>/dev/null || true
            docker rm \$(docker ps -aq --filter 'name=care-ride-backend') 2>/dev/null || true
            
            echo '📥 Loading new Docker image...'
            docker load < /tmp/care-ride-backend.tar
            
            echo '🗄️ Starting PostgreSQL database...'
            if ! docker ps | grep -q care-ride-db; then
              # Stop any existing database container
              docker stop care-ride-db 2>/dev/null || true
              docker rm care-ride-db 2>/dev/null || true
              
              # Start fresh database
              docker run -d \
                --name care-ride-db \
                --network care-ride-net \
                -e POSTGRES_DB=careride \
                -e POSTGRES_USER=careride \
                -e POSTGRES_PASSWORD=careride123 \
                -p 5432:5432 \
                -v care-ride-db-data:/var/lib/postgresql/data \
                postgres:15
                
              echo '⏳ Waiting for database to be ready...'
              sleep 20
            else
              echo '✅ Database already running'
            fi
            
            echo '🚀 Starting backend application...'
            docker run -d \
              --name care-ride-backend \
              --network care-ride-net \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://care-ride-db:5432/careride \
              -e SPRING_DATASOURCE_USERNAME=careride \
              -e SPRING_DATASOURCE_PASSWORD=careride123 \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
              -e SPRING_JPA_SHOW_SQL=false \
              care-ride-backend
            
            echo '⏳ Waiting for backend to start...'
            sleep 30
            
            echo '🔍 Checking container status...'
            docker ps --filter 'name=care-ride'
            
            echo '✅ Backend deployment completed successfully'
          "

      - name: Verify backend deployment
        run: |
          source /tmp/ssh_retry.sh
          
          echo "🔍 Verifying backend deployment..."
          
          # Check if backend is responding
          for i in {1..10}; do
            if ssh_retry "curl -f --connect-timeout 10 --max-time 30 http://localhost:8080/actuator/health > /dev/null 2>&1"; then
              echo "✅ Backend health check passed"
              
              # Test external access
              if curl -f --connect-timeout 10 --max-time 30 "http://${{ secrets.DEPLOY_HOST }}:8080/actuator/health" > /dev/null 2>&1; then
                echo "✅ Backend is accessible externally"
                exit 0
              else
                echo "⚠️ Backend responding locally but not externally"
              fi
            else
              echo "⏳ Attempt $i/10: Backend not ready yet, waiting..."
              sleep 15
            fi
          done
          
          # Get logs for debugging
          ssh_retry "echo '📋 Backend container logs:' && docker logs care-ride-backend --tail 50"
          
          echo "❌ Backend verification failed"
          exit 1

      - name: Cleanup
        if: always()
        run: |
          rm -f /tmp/deploy_key /tmp/ssh_retry.sh care-ride-backend.tar
